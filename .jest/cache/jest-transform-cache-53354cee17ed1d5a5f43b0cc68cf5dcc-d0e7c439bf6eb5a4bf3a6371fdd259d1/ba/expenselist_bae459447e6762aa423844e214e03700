08d17b452a24a6ad8830897960f67f3c
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");










var _itemSeparator = _interopRequireDefault(require("../components/item-separator"));

var _reactRedux = require("react-redux");
var _expenseService = _interopRequireDefault(require("../services/expense-service"));

var _moment = _interopRequireDefault(require("moment"));var _jsxFileName = "/home/coder/Persona/react-native/DapaniApp/screens/expense-list.tsx";var
















ExpenseList = function (_Component) {(0, _inherits2.default)(ExpenseList, _Component);



  function ExpenseList(props) {var _this;(0, _classCallCheck2.default)(this, ExpenseList);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ExpenseList).call(this, props));_this.expenseService = new _expenseService.default();_this.
















































    loadMoreExpenses = function () {
      _this.setState({ isFetchingData: true }, function () {var _this$state =
        _this.state,limit = _this$state.limit,offset = _this$state.offset,total = _this$state.total;
        var newOffset = offset + limit;
        _this.setState({ offset: newOffset }, function () {
          if (newOffset < total) {
            _this.retrieveExpenses(_this.state.offset, _this.state.limit, true);
          }
        });
      });
    };_this.













































































    filterExpenses = function (text) {
      var currentExpenses = _this.props.expenses.filter(function (expense) {
        return ExpenseList.getMatch(expense.merchant, text) || ExpenseList.getMatch(expense.user.last, text) ||
        ExpenseList.getMatch(expense.user.first, text);
      });
      _this.setState({ filteredExpenses: currentExpenses });
    };_this.state = { filteredExpenses: _this.props.expenses, offset: 0, limit: 30, isFetchingData: false, total: _this.props.total };return _this;}(0, _createClass2.default)(ExpenseList, [{ key: "componentDidMount", value: function componentDidMount() {var _this2 = this;var _this$state2 = this.state,limit = _this$state2.limit,offset = _this$state2.offset;this.retrieveExpenses(offset, limit, false);var eventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.ExpenseDetailsModule);eventEmitter.addListener('UploadImageEvent', function (event) {console.log(event);_this2.expenseService.uploadReceipt(event.file_name, event.id, function (expense) {if (expense !== null) {_this2.expenseService.dispatchUpdateExpenseReceipt(expense);_reactNative.NativeModules.ReceiptsModule.displayReceipts(expense);}_reactNative.NativeModules.ReceiptsModule.showToastMessage(expense !== null);});});eventEmitter.addListener('PostCommentEvent', function (event) {console.log(event);_this2.expenseService.dispatchUpdateExpenseComment(event.id, event.comment);});} }, { key: "retrieveExpenses", value: function retrieveExpenses(offset, limit, loadMore) {var _this3 = this;this.expenseService.fetchExpenses(offset, limit).then(function (expenseResponse) {if (loadMore) {_this3.expenseService.dispatchLoadMoreExpenses(expenseResponse.expenses);_this3.setState({ total: expenseResponse.total, filteredExpenses: [].concat((0, _toConsumableArray2.default)(_this3.state.filteredExpenses), (0, _toConsumableArray2.default)(expenseResponse.expenses)), isFetchingData: false });} else {_this3.expenseService.dispatchSaveExpenses(expenseResponse.expenses, expenseResponse.total);_this3.setState({ total: expenseResponse.total, filteredExpenses: expenseResponse.expenses });}}).catch(function (error) {return console.log(error);});} }, { key: "bindItem", value: function bindItem(data) {return _react.default.createElement(_reactNative.TouchableOpacity, { onPress: function onPress() {return ExpenseList.onPress(data);}, __source: { fileName: _jsxFileName, lineNumber: 125 } }, _react.default.createElement(_reactNative.View, { style: styles.itemWrapper, __source: { fileName: _jsxFileName, lineNumber: 126 } }, _react.default.createElement(_reactNative.View, { style: styles.itemRow, __source: { fileName: _jsxFileName, lineNumber: 127 } }, _react.default.createElement(_reactNative.Text, { style: [styles.itemStart, styles.merchant], __source: { fileName: _jsxFileName, lineNumber: 128 } }, data.merchant), _react.default.createElement(_reactNative.Text, { style: [styles.itemEnd, styles.amount], __source: { fileName: _jsxFileName, lineNumber: 131 } }, data.amount.value, " ", data.amount.currency)), _react.default.createElement(_reactNative.View, { style: styles.itemRow, __source: { fileName: _jsxFileName, lineNumber: 135 } }, _react.default.createElement(_reactNative.Text, { style: styles.item, __source: { fileName: _jsxFileName, lineNumber: 136 } }, "For ", data.user.first, " ", data.user.last), _react.default.createElement(_reactNative.Text, { style: [styles.itemEnd, styles.date], __source: { fileName: _jsxFileName, lineNumber: 139 } }, (0, _moment.default)(data.date, 'YYYY-MM-DD').fromNow()))));} }, { key: "renderFooter", value: function renderFooter() {var _this$state3 = this.state,isFetchingData = _this$state3.isFetchingData,total = _this$state3.total,offset = _this$state3.offset,limit = _this$state3.limit;var withinBound = offset + limit - total <= 0;return _react.default.createElement(_reactNative.View, { style: styles.footer, __source: { fileName: _jsxFileName, lineNumber: 151 } }, _react.default.createElement(_reactNative.Text, { style: styles.counter, __source: { fileName: _jsxFileName, lineNumber: 152 } }, "1 - ", !withinBound ? offset + (total - offset) : offset + limit, " of ", total, " expenses"), withinBound ? _react.default.createElement(_reactNative.TouchableOpacity, { activeOpacity: 0.9, onPress: this.loadMoreExpenses, style: styles.loadMoreBtn, __source: { fileName: _jsxFileName, lineNumber: 155 } }, _react.default.createElement(_reactNative.Text, { style: styles.btnText, __source: { fileName: _jsxFileName, lineNumber: 159 } }, "Load more expenses"), isFetchingData ? _react.default.createElement(_reactNative.ActivityIndicator, { color: "#F06292", style: { marginLeft: 8 }, __source: { fileName: _jsxFileName, lineNumber: 161 } }) : null) : null);} }, { key: "render", value: function render()

    {var _this4 = this;
      if (this.props.isLoading) {
        return (
          _react.default.createElement(_reactNative.View, { style: styles.loader, __source: { fileName: _jsxFileName, lineNumber: 188 } },
          _react.default.createElement(_reactNative.ActivityIndicator, { size: "large", color: "#F06292", __source: { fileName: _jsxFileName, lineNumber: 189 } })));


      }
      return (
        _react.default.createElement(_reactNative.View, { style: styles.container, __source: { fileName: _jsxFileName, lineNumber: 194 } },
        _react.default.createElement(_reactNative.View, { style: styles.searchWrapper, __source: { fileName: _jsxFileName, lineNumber: 195 } },
        _react.default.createElement(_reactNative.TextInput, {
          onChangeText: function onChangeText(text) {return _this4.filterExpenses(text);},
          placeholder: "Search by merchant/user",
          style: styles.search, __source: { fileName: _jsxFileName, lineNumber: 196 } })),


        _react.default.createElement(_reactNative.FlatList, {
          ItemSeparatorComponent: _itemSeparator.default,
          data: this.state.filteredExpenses,
          renderItem: function renderItem(data) {return _this4.bindItem(data.item);},
          keyExtractor: function keyExtractor(item) {return item.id.toString();},
          ListFooterComponent: this.renderFooter.bind(this), __source: { fileName: _jsxFileName, lineNumber: 202 } })));



    } }], [{ key: "onPress", value: function onPress(item) {_reactNative.NativeModules.ExpenseDetailsModule.displayExpenseDetails(item);} }, { key: "getMatch", value: function getMatch(firstString, secondString) {return firstString.toLowerCase().trim().match(secondString.trim().toLowerCase());} }, { key: "options", get: function get() {return { statusBar: { visible: true, style: 'light', backgroundColor: '#ba2d65' }, topBar: { title: { text: 'Expenses', color: 'white', fontWeight: 'bold' }, animate: false, background: { color: '#F06292', translucent: false } } };} }]);return ExpenseList;}(_react.Component);


var styles = _reactNative.StyleSheet.create({
  itemWrapper: {
    flex: 1,
    flexDirection: 'column',
    backgroundColor: 'white',
    padding: 16 },

  item: {
    fontSize: 14,
    color: '#696969' },

  itemRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16 },

  itemStart: {
    alignSelf: 'flex-start' },

  itemEnd: {
    alignSelf: 'flex-end' },

  container: {
    flex: 1,
    backgroundColor: 'white' },

  loader: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff' },

  list: {
    backgroundColor: '#fff' },

  merchant: {
    fontWeight: 'bold',
    fontSize: 16,
    color: '#4A4A4A' },

  amount: {
    color: '#696969',
    fontSize: 16 },

  comment: {
    color: '#696969' },

  date: {
    fontSize: 14,
    color: '#696969' },

  search: {
    padding: 14,
    marginStart: 8,
    fontSize: 16 },

  searchWrapper: {
    backgroundColor: '#F3F4F5' },

  footer: {
    padding: 8,
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'column' },

  counter: {
    flex: 1,
    padding: 8,
    color: '#696969' },

  loadMoreBtn: {
    flex: 1,
    padding: 10,
    borderColor: '#F06292',
    borderRadius: 4,
    borderWidth: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center' },

  btnText: {
    color: '#F06292',
    fontSize: 16,
    textAlign: 'center' } });





var mapStateToProps = function mapStateToProps(appState) {var _appState$expenseStat =
  appState.expenseState,expenses = _appState$expenseStat.expenses,isLoading = _appState$expenseStat.isLoading,total = _appState$expenseStat.total;
  return { expenses: expenses, isLoading: isLoading, total: total };
};var _default =

(0, _reactRedux.connect)(mapStateToProps)(ExpenseList);exports.default = _default;