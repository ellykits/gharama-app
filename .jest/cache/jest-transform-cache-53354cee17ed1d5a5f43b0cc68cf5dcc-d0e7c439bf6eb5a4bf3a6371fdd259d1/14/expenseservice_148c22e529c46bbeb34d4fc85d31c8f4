f16609d86ee453847e21b289c827e68b
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _store = require("../store");
var _expenseActions = require("../actions/expense-actions");






var _moment = _interopRequireDefault(require("moment"));var






ExpenseService = function () {function ExpenseService() {(0, _classCallCheck2.default)(this, ExpenseService);}(0, _createClass2.default)(ExpenseService, [{ key: "fetchExpenses", value: function fetchExpenses(



    offset, limit) {return _regenerator.default.async(function fetchExpenses$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return _regenerator.default.awrap(
              fetch(ExpenseService.URL + "?limit=" + limit + "&offset=" + offset, { method: 'GET' }).
              then(function (response) {return response.json();}));case 2:return _context.abrupt("return", _context.sent);case 3:case "end":return _context.stop();}}});} }, { key: "uploadReceipt", value: function uploadReceipt(


    filePath, id, uploadReceiptCallback) {
      var formData = new FormData();
      formData.append('name', 'receipt');
      formData.append('receipt', {
        uri: "file://" + filePath,
        name: "" + id + (0, _moment.default)().unix(),
        type: 'image/jpg' });


      fetch(ExpenseService.URL + "/" + id + "/receipts", {
        method: 'post',
        body: formData }).

      then(function (response) {return response.json();}).
      then(function (response) {
        console.log('upload success', response);
        uploadReceiptCallback(response);
      }).
      catch(function (error) {
        console.error('upload error', error);
        uploadReceiptCallback(null);
      });
    } }, { key: "dispatchSaveExpenses", value: function dispatchSaveExpenses(

    expenses, total) {
      _store.store.dispatch((0, _expenseActions.saveExpensesAction)(expenses, total));
    } }, { key: "dispatchUpdateExpenseComment", value: function dispatchUpdateExpenseComment(

    id, comment) {
      _store.store.dispatch((0, _expenseActions.updateExpenseCommentAction)(id, comment));
    } }, { key: "dispatchUpdateExpenseReceipt", value: function dispatchUpdateExpenseReceipt(

    expense) {
      _store.store.dispatch((0, _expenseActions.updateExpenseReceipt)(expense));
    } }, { key: "dispatchLoadMoreExpenses", value: function dispatchLoadMoreExpenses(

    expenses) {
      _store.store.dispatch((0, _expenseActions.loadMoreExpenses)(expenses));
    } }]);return ExpenseService;}();exports.default = ExpenseService;ExpenseService.URL = 'http://10.0.2.2:3000/expenses';