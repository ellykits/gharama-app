86837628e967580f4a1e623d175f9de3
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.expenseReducer = void 0;
var _immer = require("immer");


var expenseDefaultState = {
  expenses: [],
  isLoading: true,
  total: 0 };


function findExpense(draft, id) {
  return draft["expenses"].find(function (exp) {return exp.id === id;});
}

var expenseReducer = function expenseReducer() {var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : expenseDefaultState;var action = arguments.length > 1 ? arguments[1] : undefined;
  switch (action.type) {
    case "SAVE_EXPENSES":
      return (0, _immer.produce)(state, function (draft) {
        draft.expenses = [];
        action.payload.expenses.forEach(function (expense) {return (
            draft.expenses.push(expense));});

        draft.isLoading = false;
        draft.total = action.payload.total;
      });
    case "LOAD_MORE_EXPENSES":
      return (0, _immer.produce)(state, function (draft) {
        action.payload.forEach(function (expense) {return (
            draft.expenses.push(expense));});

      });
    case "UPDATE_EXPENSE_COMMENT":
      return (0, _immer.produce)(state, function (draft) {
        var updatedExpense = findExpense(draft, action.payload.id);
        if (updatedExpense) {
          updatedExpense.comment = action.payload.comment;
        }
      });
    case "UPDATE_EXPENSE_RECEIPT":
      return (0, _immer.produce)(state, function (draft) {
        var updatedExpense = findExpense(draft, action.payload.id);
        if (updatedExpense) {
          updatedExpense.receipts = action.payload.receipts;
        }
      });
    default:
      return state;}

};exports.expenseReducer = expenseReducer;